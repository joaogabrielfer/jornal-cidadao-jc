<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editar Matéria</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f9f9f9; }
        .container { max-width: 800px; margin: auto; background: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        div { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }
        input[type="text"], textarea {
            width: 100%;
            padding: 10px;
            box-sizing: border-box; 
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        textarea { height: 150px; }
        button {
            padding: 10px 15px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
        button[type="submit"] { background-color: #28a745; color: white; }
        button[type="button"] { background-color: #007bff; color: white; }
        #poll-options-container div { display: flex; margin-bottom: 8px; }
        #poll-options-container input { flex-grow: 1; }
        #poll-options-container button { margin-left: 10px; background-color: #dc3545; color: white; }
        .success-message {
            padding: 15px;
            background-color: #e6ffed;
            border: 1px solid #b8f0c2;
            color: #22813a;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Editar Matéria</h1>

        {{ if .Success }}
            <div class="success-message">{{ .Success }}</div>
        {{ end }}

        <form id="materiaForm" method="POST">
            
            <div>
                <label for="title">Título:</label>
                <input type="text" id="title" name="title" required />
            </div>
            
            <div>
                <label for="content">Conteúdo:</label>
                <textarea id="content" name="content" required></textarea>
            </div>
            
            <hr />

            <h3>Enquete (Opcional)</h3>
            <div>
                <label for="poll_question">Pergunta da Enquete:</label>
                <input type="text" id="poll_question" name="poll_question" />
            </div>
            
            <label>Opções da Enquete:</label>
            <div id="poll-options-container">
                </div>

            <button type="button" id="add-option-btn">+ Adicionar Opção</button>
            
            <hr />

            <button type="submit">Atualizar Matéria</button>
        </form>
    </div>


    <script>
        // Seletores
        const form = document.getElementById('materiaForm');
        const pollContainer = document.getElementById('poll-options-container');
        const addBtn = document.getElementById('add-option-btn');
        
        // --- LÓGICA DE ADICIONAR OPÇÃO ---
        const addPollOption = (text = '') => {
            const optionWrapper = document.createElement('div');
            
            const newInput = document.createElement('input');
            newInput.type = 'text';
            newInput.name = 'poll_options'; 
            newInput.placeholder = 'Texto da opção';
            newInput.value = text; 
            newInput.required = true;

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button'; 
            removeBtn.textContent = 'Remover';
            removeBtn.onclick = () => optionWrapper.remove();

            optionWrapper.appendChild(newInput);
            optionWrapper.appendChild(removeBtn);
            pollContainer.appendChild(optionWrapper);
        };
        
        addBtn.addEventListener('click', () => addPollOption());


        // --- TAREFA T4UH6: CARREGAR DADOS DA MATÉRIA (CORRIGIDO) ---
        
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // 1. Pegar o ID da URL
                const pathParts = window.location.pathname.split('/');
                const articleId = pathParts[pathParts.length - 2]; 
                
                if (!articleId || isNaN(parseInt(articleId))) {
                    throw new Error('ID da matéria inválido ou não encontrado na URL.');
                }
                
                // 2. Buscar os dados da matéria na API
                const response = await fetch(`/api/materia/${articleId}`);
                if (!response.ok) {
                    throw new Error(`Falha ao buscar dados da matéria (Status: ${response.status})`);
                }
                
                const data = await response.json(); // data é o próprio artigo
                
                // =================================
                // A CORREÇÃO ESTÁ AQUI
                // =================================
                // 3. Preencher os campos do formulário (sem o .article)
                document.getElementById('title').value = data.title;
                document.getElementById('content').value = data.body;
                
                // 4. Preencher a enquete (sem o .article)
                if (data.poll) {
                    document.getElementById('poll_question').value = data.poll.question;
                    
                    // 5. Criar os campos de opção (sem o .article)
                    if (data.poll.options) {
                        data.poll.options.forEach(option => {
                            addPollOption(option.option_text); // Usa a função helper
                        });
                    }
                }
                // =================================
                // FIM DA CORREÇÃO
                // =================================
                
                // 6. ATUALIZAR A AÇÃO DO FORMULÁRIO para o endpoint de 'PUT'
                form.action = `/admin/api/materia/${articleId}`;

            } catch (error) {
                console.error('Erro ao carregar dados da matéria:', error);
                alert('Não foi possível carregar os dados para edição. ' + error.message);
            }
        });


        // --- LÓGICA DE SALVAR (ATUALIZAR) OS DADOS ---
        
        form.addEventListener('submit', async (event) => {
            event.preventDefault(); 
            const formData = new FormData(form);
            
            try {
                // Envia a requisição com o método 'PUT'
                const response = await fetch(form.action, {
                    method: 'PUT', // Método HTTP 'PUT' para atualização
                    body: formData 
                });

                if (response.ok) {
                    // Sucesso! O servidor (Go) renderiza a página de sucesso
                    const successHtml = await response.text();
                    document.documentElement.innerHTML = successHtml;
                } else {
                    const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido.' }));
                    alert(`Erro ao ATUALIZAR matéria: ${errorData.message}`);
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                alert('Erro de conexão ao tentar atualizar a matéria.');
            }
        });
    </script>
    
</body>
</html>